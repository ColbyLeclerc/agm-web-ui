<!DOCTYPE html>
<html>

<head>
  <!-- TODO change to local call -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Enclosure Detail</title>
  <style>
    #loader {
      transition: all 0.3s ease-in-out;
      opacity: 1;
      visibility: visible;
      position: fixed;
      height: 100vh;
      width: 100%;
      background: #fff;
      z-index: 90000;
    }

    #loader.fadeOut {
      opacity: 0;
      visibility: hidden;
    }



    .spinner {
      width: 40px;
      height: 40px;
      position: absolute;
      top: calc(50% - 20px);
      left: calc(50% - 20px);
      background-color: #333;
      border-radius: 100%;
      -webkit-animation: sk-scaleout 1.0s infinite ease-in-out;
      animation: sk-scaleout 1.0s infinite ease-in-out;
    }

    @-webkit-keyframes sk-scaleout {
      0% {
        -webkit-transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1.0);
        opacity: 0;
      }
    }

    @keyframes sk-scaleout {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0);
      }

      100% {
        -webkit-transform: scale(1.0);
        transform: scale(1.0);
        opacity: 0;
      }
    }

  </style>
</head>

<body class="app">
  <!-- @TOC -->
  <!-- =================================================== -->
  <!--
      + @Page Loader
      + @App Content
          - #Left Sidebar
              > $Sidebar Header
              > $Sidebar Menu

          - #Main
              > $Topbar
              > $App Screen Content
    -->

  <!-- @Page Loader -->
  <!-- =================================================== -->
  <div id='loader'>
    <div class="spinner"></div>
  </div>
  <script>
    //    let enc/losures;
    window.addEventListener('load', function load() {
      const loader = document.getElementById('loader');
      setTimeout(function () {
        loader.classList.add('fadeOut');
      }, 300);
    });

  </script>

  <!-- @App Content -->
  <!-- =================================================== -->
  <div>
    <!-- #Left Sidebar ==================== -->
    <div class="sidebar">
      <div class="sidebar-inner">
        <!-- ### $Sidebar Header ### -->
        <div class="sidebar-logo">
          <div class="peers ai-c fxw-nw">
            <div class="peer peer-greed">
              <a class="sidebar-link td-n" href="index.html">
                <div class="peers ai-c fxw-nw">
                  <div class="peer">
                    <div class="logo">
                      <img src="assets/static/images/logo.png" alt="">
                    </div>
                  </div>
                  <div class="peer peer-greed">
                    <h5 class="lh-1 mB-0 logo-text">Adminator</h5>
                  </div>
                </div>
              </a>
            </div>
            <div class="peer">
              <div class="mobile-toggle sidebar-toggle">
                <a href="" class="td-n">
                  <i class="ti-arrow-circle-left"></i>
                </a>
              </div>
            </div>
          </div>
        </div>

        <!-- ### $Sidebar Menu ### -->
        <ul class="sidebar-menu scrollable pos-r">
          <li class="nav-item mT-30 active">
            <a class="sidebar-link" href="index.html">
              <span class="icon-holder">
                <i class="c-blue-500 ti-home"></i>
              </span>
              <span class="title">Dashboard</span>
            </a>
          </li>
        </ul>
      </div>
    </div>

    <!-- #Main ============================ -->
    <div class="page-container">
      <!-- ### $Topbar ### -->
      <div class="header navbar">
        <div class="header-container">
          <ul class="nav-left">
            <li>
              <a id='sidebar-toggle' class="sidebar-toggle" href="javascript:void(0);">
                <i class="ti-menu"></i>
              </a>
            </li>
            <li class="search-box">
              <a class="search-toggle no-pdd-right" href="javascript:void(0);">
                <i class="search-icon ti-search pdd-right-10"></i>
                <i class="search-icon-close ti-close pdd-right-10"></i>
              </a>
            </li>
            <li class="search-input">
              <input class="form-control" type="text" placeholder="Search...">
            </li>
          </ul>
          <ul class="nav-right">
            <li class="notifications dropdown">
              <span class="counter bgc-red">3</span>
              <a href="" class="dropdown-toggle no-after" data-toggle="dropdown">
                <i class="ti-bell"></i>
              </a>

              <ul class="dropdown-menu">
                <li class="pX-20 pY-15 bdB">
                  <i class="ti-bell pR-10"></i>
                  <span class="fsz-sm fw-600 c-grey-900">Notifications</span>
                </li>
                <li>
                  <ul class="ovY-a pos-r scrollable lis-n p-0 m-0 fsz-sm">
                    <li>
                      <a href="" class='peers fxw-nw td-n p-20 bdB c-grey-800 cH-blue bgcH-grey-100'>
                        <div class="peer mR-15">
                          <img class="w-3r bdrs-50p" src="https://randomuser.me/api/portraits/men/1.jpg" alt="">
                        </div>
                        <div class="peer peer-greed">
                          <span>
                            <span class="fw-500">John Doe</span>
                            <span class="c-grey-600">liked your <span class="text-dark">post</span>
                            </span>
                          </span>
                          <p class="m-0">
                            <small class="fsz-xs">5 mins ago</small>
                          </p>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="" class='peers fxw-nw td-n p-20 bdB c-grey-800 cH-blue bgcH-grey-100'>
                        <div class="peer mR-15">
                          <img class="w-3r bdrs-50p" src="https://randomuser.me/api/portraits/men/2.jpg" alt="">
                        </div>
                        <div class="peer peer-greed">
                          <span>
                            <span class="fw-500">Moo Doe</span>
                            <span class="c-grey-600">liked your <span class="text-dark">cover image</span>
                            </span>
                          </span>
                          <p class="m-0">
                            <small class="fsz-xs">7 mins ago</small>
                          </p>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="" class='peers fxw-nw td-n p-20 bdB c-grey-800 cH-blue bgcH-grey-100'>
                        <div class="peer mR-15">
                          <img class="w-3r bdrs-50p" src="https://randomuser.me/api/portraits/men/3.jpg" alt="">
                        </div>
                        <div class="peer peer-greed">
                          <span>
                            <span class="fw-500">Lee Doe</span>
                            <span class="c-grey-600">commented on your <span class="text-dark">video</span>
                            </span>
                          </span>
                          <p class="m-0">
                            <small class="fsz-xs">10 mins ago</small>
                          </p>
                        </div>
                      </a>
                    </li>
                  </ul>
                </li>
                <li class="pX-20 pY-15 ta-c bdT">
                  <span>
                    <a href="" class="c-grey-600 cH-blue fsz-sm td-n">View All Notifications <i
                        class="ti-angle-right fsz-xs mL-10"></i></a>
                  </span>
                </li>
              </ul>
            </li>
            <li class="notifications dropdown">
              <span class="counter bgc-blue">3</span>
              <a href="" class="dropdown-toggle no-after" data-toggle="dropdown">
                <i class="ti-email"></i>
              </a>

              <ul class="dropdown-menu">
                <li class="pX-20 pY-15 bdB">
                  <i class="ti-email pR-10"></i>
                  <span class="fsz-sm fw-600 c-grey-900">Emails</span>
                </li>
                <li>
                  <ul class="ovY-a pos-r scrollable lis-n p-0 m-0 fsz-sm">
                    <li>
                      <a href="" class='peers fxw-nw td-n p-20 bdB c-grey-800 cH-blue bgcH-grey-100'>
                        <div class="peer mR-15">
                          <img class="w-3r bdrs-50p" src="https://randomuser.me/api/portraits/men/1.jpg" alt="">
                        </div>
                        <div class="peer peer-greed">
                          <div>
                            <div class="peers jc-sb fxw-nw mB-5">
                              <div class="peer">
                                <p class="fw-500 mB-0">John Doe</p>
                              </div>
                              <div class="peer">
                                <small class="fsz-xs">5 mins ago</small>
                              </div>
                            </div>
                            <span class="c-grey-600 fsz-sm">
                              Want to create your own customized data generator for your app...
                            </span>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="" class='peers fxw-nw td-n p-20 bdB c-grey-800 cH-blue bgcH-grey-100'>
                        <div class="peer mR-15">
                          <img class="w-3r bdrs-50p" src="https://randomuser.me/api/portraits/men/2.jpg" alt="">
                        </div>
                        <div class="peer peer-greed">
                          <div>
                            <div class="peers jc-sb fxw-nw mB-5">
                              <div class="peer">
                                <p class="fw-500 mB-0">Moo Doe</p>
                              </div>
                              <div class="peer">
                                <small class="fsz-xs">15 mins ago</small>
                              </div>
                            </div>
                            <span class="c-grey-600 fsz-sm">
                              Want to create your own customized data generator for your app...
                            </span>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="" class='peers fxw-nw td-n p-20 bdB c-grey-800 cH-blue bgcH-grey-100'>
                        <div class="peer mR-15">
                          <img class="w-3r bdrs-50p" src="https://randomuser.me/api/portraits/men/3.jpg" alt="">
                        </div>
                        <div class="peer peer-greed">
                          <div>
                            <div class="peers jc-sb fxw-nw mB-5">
                              <div class="peer">
                                <p class="fw-500 mB-0">Lee Doe</p>
                              </div>
                              <div class="peer">
                                <small class="fsz-xs">25 mins ago</small>
                              </div>
                            </div>
                            <span class="c-grey-600 fsz-sm">
                              Want to create your own customized data generator for your app...
                            </span>
                          </div>
                        </div>
                      </a>
                    </li>
                  </ul>
                </li>
                <li class="pX-20 pY-15 ta-c bdT">
                  <span>
                    <a href="email.html" class="c-grey-600 cH-blue fsz-sm td-n">View All Email <i
                        class="fs-xs ti-angle-right mL-10"></i></a>
                  </span>
                </li>
              </ul>
            </li>
            <li class="dropdown">
              <a href="" class="dropdown-toggle no-after peers fxw-nw ai-c lh-1" data-toggle="dropdown">
                <div class="peer mR-10">
                  <img class="w-2r bdrs-50p" src="https://randomuser.me/api/portraits/men/10.jpg" alt="">
                </div>
                <div class="peer">
                  <span class="fsz-sm c-grey-900">John Doe</span>
                </div>
              </a>
              <ul class="dropdown-menu fsz-sm">
                <li>
                  <a href="" class="d-b td-n pY-5 bgcH-grey-100 c-grey-700">
                    <i class="ti-settings mR-10"></i>
                    <span>Setting</span>
                  </a>
                </li>
                <li>
                  <a href="" class="d-b td-n pY-5 bgcH-grey-100 c-grey-700">
                    <i class="ti-user mR-10"></i>
                    <span>Profile</span>
                  </a>
                </li>
                <li>
                  <a href="email.html" class="d-b td-n pY-5 bgcH-grey-100 c-grey-700">
                    <i class="ti-email mR-10"></i>
                    <span>Messages</span>
                  </a>
                </li>
                <li role="separator" class="divider"></li>
                <li>
                  <a href="" class="d-b td-n pY-5 bgcH-grey-100 c-grey-700">
                    <i class="ti-power-off mR-10"></i>
                    <span>Logout</span>
                  </a>
                </li>
              </ul>
            </li>
          </ul>
        </div>
      </div>

      <!-- ### $App Screen Content ### 6 -->
      <main class='main-content bgc-grey-100'>
        <div id='mainContent'>
          <div id="graphs" class="row gap-20 masonry pos-r">
            <div class="masonry-sizer col-md-10 pos-a"></div>
            <!-- <div class="masonry-item col-md-10">
                <div class="bgc-white p-20 bd">
                  <h6 class="c-grey-900">Plant A</h6>
                  <div class="mT-30">
                    <canvas id="line-chart" height="220"></canvas>
                  </div>
                </div>
              </div> -->
            <!-- <div class="masonry-item col-md-10">
                <div class="bgc-white p-20 bd">
                  <h6 class="c-grey-900">Plant B</h6>
                  <div class="mT-30">
                    <canvas id="line-chart-2" height="220"></canvas>
                  </div>
                </div>
              </div> -->
          </div>
        </div>
      </main>

      <!-- ### $App Screen Footer ### -->
      <footer class="bdT ta-c p-30 lh-0 fsz-sm c-grey-600">
        <span>Copyright © 2019 Designed by <a href="https://colby.io" target='_blank' title="Colorlib">CJ Software</a>.
          All rights reserved.</span>
      </footer>
    </div>
  </div>

</body>
<script>
  //https://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors
  const pSBC = (p, c0, c1, l) => {
    let r, g, b, P, f, t, h, i = parseInt,
      m = Math.round,
      a = typeof (c1) == "string";
    if (typeof (p) != "number" || p < -1 || p > 1 || typeof (c0) != "string" || (c0[0] != 'r' && c0[0] != '#') || (
        c1 && !a)) return null;
    if (!this.pSBCr) this.pSBCr = (d) => {
      let n = d.length,
        x = {};
      if (n > 9) {
        [r, g, b, a] = d = d.split(","), n = d.length;
        if (n < 3 || n > 4) return null;
        x.r = i(r[3] == "a" ? r.slice(5) : r.slice(4)), x.g = i(g), x.b = i(b), x.a = a ? parseFloat(a) : -1
      } else {
        if (n == 8 || n == 6 || n < 4) return null;
        if (n < 6) d = "#" + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (n > 4 ? d[4] + d[4] : "");
        d = i(d.slice(1), 16);
        if (n == 9 || n == 5) x.r = d >> 24 & 255, x.g = d >> 16 & 255, x.b = d >> 8 & 255, x.a = m((d & 255) /
          0.255) / 1000;
        else x.r = d >> 16, x.g = d >> 8 & 255, x.b = d & 255, x.a = -1
      }
      return x
    };
    h = c0.length > 9, h = a ? c1.length > 9 ? true : c1 == "c" ? !h : false : h, f = pSBCr(c0), P = p < 0, t = c1 &&
      c1 != "c" ? pSBCr(c1) : P ? {
        r: 0,
        g: 0,
        b: 0,
        a: -1
      } : {
        r: 255,
        g: 255,
        b: 255,
        a: -1
      }, p = P ? p * -1 : p, P = 1 - p;
    if (!f || !t) return null;
    if (l) r = m(P * f.r + p * t.r), g = m(P * f.g + p * t.g), b = m(P * f.b + p * t.b);
    else r = m((P * f.r ** 2 + p * t.r ** 2) ** 0.5), g = m((P * f.g ** 2 + p * t.g ** 2) ** 0.5), b = m((P * f.b **
      2 + p * t.b ** 2) ** 0.5);
    a = f.a, t = t.a, f = a >= 0 || t >= 0, a = f ? a < 0 ? t : t < 0 ? a : a * P + t * p : 0;
    if (h) return "rgb" + (f ? "a(" : "(") + r + "," + g + "," + b + (f ? "," + m(a * 1000) / 1000 : "") + ")";
    else return "#" + (4294967296 + r * 16777216 + g * 65536 + b * 256 + (f ? m(a * 255) : 0)).toString(16).slice(1,
      f ? undefined : -2)
  }

  const sensor_type = {
    TEMP_HUMID: 'temperature-humidity',
    SOIL_MOIST: 'soil-moisture',
    SOIL_TEMP: 'soil-temperature'
  }

  function getRandomColor() {
    var letters = '0123456789ABCDEF';
    var color = '#';
    for (var i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  }

  function processGraph(index, data_list) {


    // console.log("data_list:");
    // console.log(data_list);

    labels = {};
    data = {};

    data_list.data.forEach(function (elem) {

      // console.log(labels[elem['sensor_id']])
      if (labels[elem['sensor_id']] === undefined) {
        labels[elem['sensor_id']] = [];
      }

      // console.log(labels[elem['sensor_id']]);

      if (data[elem['sensor_id']] === undefined) {
        data[elem['sensor_id']] = [];
      }

      // console.log(labels)

      labels[elem['sensor_id']].push(elem['x_axis']);
      data[elem['sensor_id']].push(elem['y_axis']);

      // labels.push(
      //   elem['x_axis']
      //   );
      // data.push(
      //   elem['y_axis']
      //   );
    });

    dataset_generated = []
    let key_lbl;
    console.log(labels)

    for (const key of Object.keys(labels)) {

      let color = getRandomColor();

      key_lbl = key;
      dataset_generated.push({
        label: 'Enclosure ID '.concat(data_list['enclosure_id']),
        backgroundColor: 'rgba(237, 231, 246, 0.5)',
        borderColor: pSBC(-0.5, color, color, false, true),
        pointBackgroundColor: pSBC(0.5, color, color, false, true),
        borderWidth: 2,
        data: data[key],
      });

    }

    /*
    {
                label: 'Enclosure ID '.concat(data_list['enclosure_id']),
                backgroundColor: 'rgba(237, 231, 246, 0.5)',
                borderColor: '#673ab7',
                pointBackgroundColor: '#512da8',
                borderWidth: 2,
                data: data,
              }
    */
    // console.log(labels);
    // console.log(data_d)
    // console.log('line-chart-'.concat(index));

    const lineChartBox = $('#line-chart-'.concat(index));
    const lineCtx = lineChartBox[0].getContext('2d');
    // const lineCtxTwoTest = lineChartBox2.getContext('2d');

    lineChartBox.height = 80;
    // lineChartBox2.height = 80;

    isChartRendered = false;

    //For loop per-plant
    new Chart(lineCtx, {
      type: 'line',
      data: {
        labels: labels[key_lbl],
        datasets: dataset_generated,
        // [{
        //   label: 'Enclosure ID '.concat(data_list['enclosure_id']),
        //   backgroundColor: 'rgba(237, 231, 246, 0.5)',
        //   borderColor: '#673ab7',
        //   pointBackgroundColor: '#512da8',
        //   borderWidth: 2,
        //   data: data,
        // }
        // , {
        //     label: 'Series B',
        //     backgroundColor: 'rgba(232, 245, 233, 0.5)',
        //     borderColor: '#03a9f4',
        //     pointBackgroundColor: '#0277bd',
        //     borderWidth: 2,
        //     data: [70, 75, 85, 70, 75, 85, 70],
        // }
        // ],
      },

      options: {
        legend: {
          display: false,
        }
        //         ,// setting following option is mandatory
        //     animation: {
        //      onComplete: function() {
        //         isChartRendered = true
        //      }
        //   }
      },

    });

  }

  //   let graph_index = 0;

  function generateGraphs(data, sensor_type) {

    for (const key of Object.keys(data)) {

      // console.log("key: " + key);
      // console.log("data[key]: ");
      // console.log(data[key]);
      // const enclosure_id = data[key].enclosure_id;
      // const readings = data[key].data;
      const sensor_id = data[key].sensor_id;
      const sensor_type = data[key].sensor_type;
      const enclosure_title = data[key].enclosure_title;
      const plant_name = data[key].plant_name;

      // console.log("elems:")
      // console.log(enclosure_title)

      // let graph_index_begin = graph_index;

      // console.log("readings " + readings)

      //TODO change to startup 

      // var enclosures = 0;
      let graph_html =
        "<div class=\"masonry-sizer col-md-10 pos-a\"><\/div>\r\n              <div class=\"masonry-item col-md-10\">\r\n                <div class=\"bgc-white p-20 bd\">\r\n                  <h6 class=\"c-grey-900\">{title}<\/h6>\r\n                  <div class=\"mT-30\">\r\n                    <canvas id=\"line-chart-{index}\" height=\"220\"><\/canvas>\r\n                  <\/div>\r\n                <\/div>\r\n              <\/div>";

      let graphs = "";

      //   console.log("enclosures: " + enclosures)

      //   enclosures.forEach(function (enc) {
      //   graphs += graph_html.replace("{title}", enc.title).replace("{index}", sensor_id);
      graphs += graph_html.replace("{title}", enclosure_title
        .concat(" - ")
        .concat(plant_name)
        .concat("( ")
        .concat(sensor_type)
        .concat(" )")
      ).replace("{index}",
        sensor_id);
      // graph_index++;

      // console.log(enc);
      //   });

      $("#graphs").append(graphs);

    }
  }

  function retrieveGraphData(reading_type) {
    let readings = -1;
    let enclosures = -1;

    //TODO data will be auth token (or it'll be in header)
    $.ajax({
      url: "json-data/" + reading_type + "-readings.json",
      dataType: 'json',
      async: false,
      // data: myData,
      success: function (data) {
        readings = data;
      }
    });
    $.ajax({
      url: "json-data/enclosures.json",
      dataType: 'json',
      async: false,
      // data: myData,
      success: function (data) {
        enclosures = data;
      }
    });

    // console.log("enc: " + enclosures + " read: " + readings);

    return {
      readings: readings,
      enclosures: enclosures
    }
  }

  // Assuming "?enclosure-id=1234"
  var urlParams = new URLSearchParams(window.location.search);
  let enc_id = -1;

  if (urlParams.has('enclosure-id')) {
    enc_id = urlParams.get('enclosure-id');
  }

  let dataTH = retrieveGraphData(sensor_type.TEMP_HUMID);
  let dataSM = retrieveGraphData(sensor_type.SOIL_MOIST);
  let dataST = retrieveGraphData(sensor_type.SOIL_TEMP);
  // console.log(data)

  let dataTH_parsed = parseData(dataTH.enclosures, dataTH.readings, sensor_type.TEMP_HUMID, enc_id);
  let dataSM_parsed = parseData(dataSM.enclosures, dataSM.readings, sensor_type.SOIL_MOIST, enc_id);
  let dataST_parsed = parseData(dataST.enclosures, dataST.readings, sensor_type.SOIL_TEMP, enc_id);

  // console.log("data parsed:");
  // console.log(dataTH_parsed);
  // console.log(dataSM_parsed);
  // console.log(dataST_parsed);

  //JSON.parse(JSON.stringify(a));
  generateGraphs(dataTH_parsed, sensor_type.TEMP_HUMID);
  generateGraphs(dataSM_parsed, sensor_type.SOIL_MOIST);
  generateGraphs(dataST_parsed, sensor_type.SOIL_TEMP);

  drawGraph(dataTH_parsed);
  drawGraph(dataSM_parsed);
  drawGraph(dataST_parsed);

  function parseData(enclosures, readings, sensor_type, enclosure_id) {
    let reading_title = {
      'temperature-humidity': 'temp-level',
      'soil-moisture': 'moisture-level',
      'soil-temperature': 'temp-level'
    }

    let enc_data = {};

    // console.log(enclosures)

    enclosures.forEach(function (enc) {

      let snsr_data = [];
      //   let sensor_id = -1;
      if (enc['enclosure-id'] == enclosure_id) {

        enc.plants.forEach(function (plnt) {
          let plant_id = plnt['plant-id'];
          plnt.sensors.forEach(function (snsr) {
            //   console.log("if " + snsr['sensor-type'] + " === " + sensor_type)
            let sensor_id = -1;
            // let plant_name = plnt['name'];
            if (snsr['sensor-type'] === sensor_type) {
              readings.forEach(function (reading) {
                if (reading['sensor-id'] === snsr['sensor-id']) {
                  sensor_id = snsr['sensor-id'];
                  snsr_data.push({
                    plant_id: plant_id,
                    sensor_id: sensor_id,
                    x_axis: reading[sensor_type + '-reading-id'],
                    y_axis: reading[reading_title[sensor_type]]
                  });
                }

                if (snsr_data.length !== 0) {
                  enc_data[plant_id] = {
                    enclosure_id: enc['enclosure-id'],
                    enclosure_title: enc['title'],
                    plant_name: plnt['name'],
                    plant_id: plant_id,
                    data: snsr_data,
                    sensor_id: sensor_id,
                    sensor_type: sensor_type
                  };
                }
              });

              // if (snsr_data.length !== 0) {
              //   enc_data[plant_id] = {
              //     enclosure_id: enc['enclosure-id'],
              //     enclosure_title: enc['title'],
              //     plant_name: plnt['name'],
              //     plant_id: plant_id,
              //     data: snsr_data,
              //     sensor_id: sensor_id,
              //     sensor_type: sensor_type
              //   };
              // }
            }
          });
        });
      }
    });

    return enc_data;
  }

  function drawGraph(enc_data) {
    console.log("enc_data_b4");
    // console.log(enc_data)

    for (const key of Object.keys(enc_data)) {
      processGraph(enc_data[key].sensor_id, enc_data[key]);
    }

    // for (i = 0; i < enc_data.length; i++) {
    //   console.log("i: " + i + " enc_data: " + enc_data[i]);
    //   processGraph(enc_data[i].sensor_id, enc_data[i]);
    // }

  }

</script>

</html>
